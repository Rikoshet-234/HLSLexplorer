// Dummy shaders are here.

#pragma once

static const char szDummyPS[] =
"cbuffer cbPerFrame : register (b0)\n"
"{\n "
"	float4 cb0_v0;\n"
"	float4 cb0_v1;\n"
"	float4 cb0_v2;\n"
"	float4 cb0_v3;\n"
"}\n"
"\n"
"cbuffer cbData : register (b12)\n"
"{\n "
"	float  elapsedTime;\n"
"	uint   numFrames;\n"
"	uint2  cursorPos;\n"
"\n"
"	float2 viewportSize;\n"
"	float2 viewportInvSize;\n"
"}\n"
"\n"
"Texture2D texture0 : register (t0);\n"
"Texture2D texture1 : register (t1);\n"
"\n"
"SamplerState samplerPointClamp  : register (s0);\n"
"SamplerState samplerPointWrap   : register (s1);\n"
"SamplerState samplerLinearClamp : register (s2);\n"
"SamplerState samplerLinearWrap  : register (s3);\n"
"SamplerState samplerAnisoClamp  : register (s4);\n"
"SamplerState samplerAnisoWrap   : register (s5);\n"
"\n"
"struct VS_OUTPUT\n"
"{\n "
"	float4 PositionH : SV_Position;\n"
"	float2 Texcoords : Texcoord0;\n"
"};\n"
"\n"
"\n"
"\n"
"float4 DummyPS( in VS_OUTPUT Input ) : SV_Target0\n"
"{\n"
"	float3 color = texture0.Sample( samplerLinearClamp, Input.Texcoords ).rgb;\n "
"\n"
"	return float4( color, 1.0 );\n"
"} ";


static const char szDummyVS[] = 
"cbuffer cbPerFrame : register (b0)"
"{\n"
"	float4 cb0_v0;\n"
"	float4 cb0_v1;\n"
"	float4 cb0_v2;\n"
"	float4 cb0_v3;\n"
"}\n"
"\n"
"cbuffer cbPerObject : register (b1)\n"
"{\n"
"	matrix g_mtxWorld;\n"
"	matrix g_mtxViewProj;\n"
"}\n"
"\n"
"struct VS_INPUT\n"
"{\n"
"	float3 PositionW : POSITION;\n"
"	float2 Texcoord : TEXCOORD;\n"
"	float3 NormalW : NORMAL;\n"
"};\n"
"\n"
"struct VS_OUTPUT\n"
"{\n"
"	float4 PositionH : SV_Position;\n"
"	float3 PositionW : Position;\n"
"	float2 Texcoord : Texcoord0;\n"
"	float3 Normal : Normal;\n"
"};\n"
"\n"
"VS_OUTPUT DummyVS( VS_INPUT Input )\n"
"{\n"
"	VS_OUTPUT Output = (VS_OUTPUT)0;\n"
"\n"
"	Output.PositionH = mul( float4( Input.PositionW, 1.0 ), g_mtxWorld );\n"
"	Output.PositionW = Output.PositionH.xyz;\n"
"\n"
"	Output.PositionH = mul( Output.PositionH, g_mtxViewProj );\n"
"\n"
"	Output.Texcoord = Input.Texcoord;\n"
"	Output.Normal = normalize( Input.NormalW );\n"
"\n"
"\n"
"	return Output;\n"
"}";


static const char szDummyCS[] = 
"//--------------------------------------------------------------------------------------\n"
"// File: BasicCompute11.hlsl\n"
"//\n"
"// This file contains the Compute Shader to perform array A + array B\n"
"// \n"
"// Copyright (c) Microsoft Corporation. All rights reserved.\n"
"//--------------------------------------------------------------------------------------\n"
"\n"
"#ifdef USE_STRUCTURED_BUFFERS\n"
"\n"
"struct BufType\n"
"{\n"
"	int i;\n"
"	float f;\n"
"#ifdef TEST_DOUBLE\n"
"	double d;\n"
"#endif    \n"
"};\n"
"\n"
"StructuredBuffer<BufType> Buffer0 : register(t0);\n"
"StructuredBuffer<BufType> Buffer1 : register(t1);\n"
"RWStructuredBuffer<BufType> BufferOut : register(u0);\n"
"\n"
"[numthreads( 1, 1, 1 )]\n"
"void DummyCS( uint3 DTid : SV_DispatchThreadID )\n"
"{\n"
"	BufferOut[DTid.x].i = Buffer0[DTid.x].i + Buffer1[DTid.x].i;\n"
"	BufferOut[DTid.x].f = Buffer0[DTid.x].f + Buffer1[DTid.x].f;\n"
"#ifdef TEST_DOUBLE\n"
"	BufferOut[DTid.x].d = Buffer0[DTid.x].d + Buffer1[DTid.x].d;\n"
"#endif\n"
"}\n"
"\n"
"#else // The following code is for raw buffers\n"
"\n"
"ByteAddressBuffer Buffer0 : register(t0);\n"
"ByteAddressBuffer Buffer1 : register(t1);\n"
"RWByteAddressBuffer BufferOut : register(u0);\n"
"\n"
"[numthreads( 1, 1, 1 )]\n"
"void DummyCS( uint3 DTid : SV_DispatchThreadID )\n"
"{\n"
"#ifdef TEST_DOUBLE\n"
"	int i0 = asint( Buffer0.Load( DTid.x * 16 ) );\n"
"	float f0 = asfloat( Buffer0.Load( DTid.x * 16 + 4 ) );\n"
"	double d0 = asdouble( Buffer0.Load( DTid.x * 16 + 8 ), Buffer0.Load( DTid.x * 16 + 12 ) );\n"
"	int i1 = asint( Buffer1.Load( DTid.x * 16 ) );\n"
"	float f1 = asfloat( Buffer1.Load( DTid.x * 16 + 4 ) );\n"
"	double d1 = asdouble( Buffer1.Load( DTid.x * 16 + 8 ), Buffer1.Load( DTid.x * 16 + 12 ) );\n"
"\n"
"	BufferOut.Store( DTid.x * 16, asuint( i0 + i1 ) );\n"
"	BufferOut.Store( DTid.x * 16 + 4, asuint( f0 + f1 ) );\n"
"\n"
"	uint dl, dh;\n"
"	asuint( d0 + d1, dl, dh );\n"
"\n"
"	BufferOut.Store( DTid.x * 16 + 8, dl );\n"
"	BufferOut.Store( DTid.x * 16 + 12, dh );\n"
"	#else\n"
"	int i0 = asint( Buffer0.Load( DTid.x * 8 ) );\n"
"	float f0 = asfloat( Buffer0.Load( DTid.x * 8 + 4 ) );\n"
"	int i1 = asint( Buffer1.Load( DTid.x * 8 ) );\n"
"	float f1 = asfloat( Buffer1.Load( DTid.x * 8 + 4 ) );\n"
"\n"
"	BufferOut.Store( DTid.x * 8, asuint( i0 + i1 ) );\n"
"	BufferOut.Store( DTid.x * 8 + 4, asuint( f0 + f1 ) );\n"
"#endif // TEST_DOUBLE\n"
"}\n"
"\n"
"#endif // USE_STRUCTURED_BUFFERS\n";

